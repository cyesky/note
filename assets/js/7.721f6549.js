(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{272:function(t,e,a){"use strict";a.r(e);var r=a(38),i=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"删除初始化项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除初始化项目","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除初始化项目")]),t._v(" "),a("p",[a("code",[t._v("git rm -rf .git")])]),t._v(" "),a("h2",{attrs:{id:"设置默认推送地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置默认推送地址","aria-hidden":"true"}},[t._v("#")]),t._v(" 设置默认推送地址")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push --set-upstream origin master\n")])])]),a("p",[t._v("这样修改之后，就不用每次提交时输入 "),a("code",[t._v("git push -u origin master")]),t._v(" ，直接使用"),a("code",[t._v("git push")]),t._v("即可。其中 "),a("code",[t._v("-u")]),t._v(" 是 "),a("code",[t._v("--set-upstream")]),t._v("的缩写。")]),t._v(" "),a("h2",{attrs:{id:"gitignore文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore文件","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v(".gitignore")]),t._v("文件")]),t._v(" "),a("h3",{attrs:{id:"文件不起作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件不起作用","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件不起作用")]),t._v(" "),a("p",[a("code",[t._v(".gitignore")]),t._v(" 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore 是无效的。解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm -r [文件/.] --cached .\ngit add .\ngit commit -m 'update .gitignore'\n")])])]),a("h3",{attrs:{id:"忽略规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 忽略规则")]),t._v(" "),a("p",[t._v("使用 Git 管理代码的过程中，可以修改 "),a("strong",[t._v(".gitignore")]),t._v(" 文件中的标示的方法来忽略开发者想忽略掉的文件或目录，如果没有 "),a("strong",[t._v(".gitignore")]),t._v(" 文件，可以自己手工创建。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("以斜杠“/”开头表示目录；\n以星号“\\*”通配多个字符；\n以问号“?”通配单个字符\n以方括号“\\[\\]”包含单个字符的匹配列表；\n以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。\n注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的\n")])])]),a("h2",{attrs:{id:"删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),a("p",[t._v("在用 git 管理项目代码时，有时会创建不同名称的分支，以保证代码的合并和紧急回滚，bug 临时修复等。等项目开发完后，就需要执行一些删除分支操作，保证代码的完整性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1.列出本地分支：\ngit branch\n2.删除本地分支：\ngit branch -D dev\ngit branch --delete dev\n3.删除本地的远程分支：\ngit branch -r -D origin/dev\n4.远程删除git服务器上的分支：\ngit push origin -d dev\ngit push origin --delete dev\n")])])]),a("p",[a("strong",[t._v("注意：git 命令区分大小写，例如-D 和-d 在不同的地方虽然都是删除的意思，并且它们的完整写法都是--delete，但简易写法用错大小写会执行失败。")])]),t._v(" "),a("h2",{attrs:{id:"git-配置在用户目录下的文件结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-配置在用户目录下的文件结构","aria-hidden":"true"}},[t._v("#")]),t._v(" git 配置在用户目录下的文件结构")]),t._v(" "),a("blockquote",[a("p",[t._v(".gitconfig 全局配置文件")]),t._v(" "),a("p",[t._v(".git-credentials 用户账号密码记录文件")]),t._v(" "),a("p",[t._v(".ssh 目录")]),t._v(" "),a("p",[t._v("id_rsa")]),t._v(" "),a("p",[t._v("id_rsa.pub")]),t._v(" "),a("p",[t._v("known_hosts")])]),t._v(" "),a("p",[t._v("更多配置信息，可以参考这个网址，暂时没深研究，主要是处理优先级的问题")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/fireporsche/p/9359130.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitconfig"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"通过-https-提交-git，记住密码。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-https-提交-git，记住密码。","aria-hidden":"true"}},[t._v("#")]),t._v(" 通过 https 提交 git，记住密码。")]),t._v(" "),a("p",[t._v("凭据可以设置为全局，也可以设置为仅仅在当前的项目下起作用。")]),t._v(" "),a("p",[t._v("如果想使用全局，则设置为： "),a("code",[t._v("git config –global credential.helper store [–file=git_credentails]")])]),t._v(" "),a("p",[t._v("如果仅仅设置当前项目有效，则进入项目代码目录下，运行： "),a("code",[t._v("git config credential.helper store [–file=.git_credentails]")])]),t._v(" "),a("p",[t._v("上面的 "),a("code",[t._v("–file=.git-credentials")]),t._v(" 表示你的用户名密码存储的文件目录结构，即存放在哪里由你指定。 默认 "),a("code",[t._v(".git_credentails")]),t._v(" 文件")]),t._v(" "),a("h3",{attrs:{id:"方法一（手动）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一（手动）","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法一（手动）")]),t._v(" "),a("p",[t._v("1） 在你的用户目录下新建一个文本文件 "),a("code",[t._v(".git-credentials")])]),t._v(" "),a("p",[t._v("用户目录:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("windows:"),a("code",[t._v("C:/Users/username")])])]),t._v(" "),a("li",[a("p",[t._v("mac os x:"),a("code",[t._v("/Users/username")])])]),t._v(" "),a("li",[a("p",[t._v("linux:"),a("code",[t._v("/home/username")])])])]),t._v(" "),a("p",[a("code",[t._v("touch ~/.git-credentials")])]),t._v(" "),a("p",[a("code",[t._v("vim ~/.git-credentials")])]),t._v(" "),a("p",[t._v("2）添加一行这个内容内容")]),t._v(" "),a("p",[a("code",[t._v("https://{username}:{passwd}@github.com")])]),t._v(" "),a("p",[t._v("上述{username}和{password}要换成你的 github 的账号名和密码，例如： "),a("strong",[t._v("https://admin@cyesky.com:mmmmm@github.com")]),t._v("、那个平台写哪个后缀域名。其中 用户名，特殊字符要 url 转码，例如 @ 应写 "),a("strong",[t._v("%40")])]),t._v(" "),a("p",[t._v("3）在用户目录下的.gitconfig 文件最后添加以下代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[credential]\n    helper = store\n")])])]),a("p",[t._v("或者执行命令"),a("code",[t._v("git config --global credential.helper store")]),t._v(" ，上述命令会在"),a("code",[t._v("~/.gitconfig")]),t._v("文件末尾添加如上配置。")]),t._v(" "),a("p",[a("strong",[t._v("亲测有效")]),t._v(" 经过上述三步配置之后, 你 push 代码到 github 时, 便无需再输入用户名密码了")]),t._v(" "),a("h3",{attrs:{id:"方法二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法二")]),t._v(" "),a("p",[t._v("**以下未测试")]),t._v(" "),a("p",[t._v("1） 在命令行输入命令:")]),t._v(" "),a("p",[t._v("​ "),a("code",[t._v("git config --global credential.helper store")])]),t._v(" "),a("p",[t._v("2） 现在 push 你的代码 ("),a("code",[t._v("git push")]),t._v("), 这时会让你输入用户名密码, 这一步会在用户目录下生成文件"),a("code",[t._v(".git-credential")]),t._v("记录用户名密码的信息, 下次再 push 代码时就不用输入用户名密码了。")]),t._v(" "),a("h2",{attrs:{id:"通过-ssh-提交-git，记住密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-ssh-提交-git，记住密码","aria-hidden":"true"}},[t._v("#")]),t._v(" 通过 ssh 提交 git，记住密码")]),t._v(" "),a("p",[t._v("三次回车")]),t._v(" "),a("h2",{attrs:{id:"git-config命令的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-config命令的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("git config")]),t._v("命令的使用")]),t._v(" "),a("p",[a("code",[t._v("git config --global")]),t._v("命令实际上在操作用户目录下的"),a("code",[t._v(".gitconfig")]),t._v("文件。我们 cat 一下此文件("),a("code",[t._v("cat .gitconfig")]),t._v("), 其内容如下:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[user]\n    name = alice\n    email = alice@aol.com\n[credential]\n    helper = store\n")])])]),a("p",[a("code",[t._v('git config --global user.email "admin@cyesky.com"')]),t._v("操作的就是上面的 email")]),t._v(" "),a("p",[a("code",[t._v("git config --global credential.helper store")]),t._v("操作的就是上面最后一行的值")]),t._v(" "),a("h2",{attrs:{id:"ssh-文件夹目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-文件夹目录结构","aria-hidden":"true"}},[t._v("#")]),t._v(" ssh 文件夹目录结构")])])},[],!1,null,null,null);e.default=i.exports}}]);