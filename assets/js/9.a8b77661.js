(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{277:function(a,e,t){"use strict";t.r(e);var r=t(38),s=Object(r.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"小试牛刀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小试牛刀","aria-hidden":"true"}},[a._v("#")]),a._v(" 小试牛刀")]),a._v(" "),t("h2",{attrs:{id:"一、数组里面对象是怎么排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、数组里面对象是怎么排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、数组里面对象是怎么排序")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("先科普一下数组的排序函数")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("sort(形参)，默认排序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr=[10,5,40,25,1000,1]\nconsole.log(arr.sort)//1,10,1000,25,40,5\n//可以看到，上面的代码没有按照数值的大小对数字进行排序，因为如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。听不懂，没关系，记住就行了。。。或者找我，我给你讲的再具体点。。。。\n")])])])]),a._v(" "),t("li",[t("p",[a._v("数组升序排列")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/*\n如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：\n若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n若 a 等于 b，则返回 0。\n若 a 大于 b，则返回一个大于 0 的值。\n*/\n//声明升序 排序函数\nfunction sortNumber(a,b)\n{\n\treturn a - b\n}\nvar arr=[10,5,40,25,1000,1]\n//调用函数并实现排序，此时不需要传递形参 a和b  因为这里的a和b也是再遍历arr数组时，自动就有的\nconsole.log(arr.sort(sortNumber))//1,5,10,25,40,1000\n")])])])]),a._v(" "),t("li",[t("p",[a._v("补充说明")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("sort()方法主要依靠其回调函数来进行排序，回调函数中需要两个参数，在执行sort()方法时会调用回调函数，这时会将调用sort()方法的数组中的元素作为实参两两依次作为回调函数实参传入，通过回调函数的条件进行比较得出一个返回值，将返回值作为sort()函数的参数来判断是否交换，大于零则交换，否则不交换。 \n  所以回调函数规定了排序的条件以及进行排序，而sort()方法是根据这个条件进行交换。所以sort()函数只执行一次，回调函数会依次两两传入实参。\n")])])])])])]),a._v(" "),t("li",[t("p",[a._v("实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var arr = [\n        {\n            a: 10\n        },\n        {\n            a: 2\n        },\n        {\n            a: 3\n        }\n  ];\nfunction objSort(shuxing) {\n    return function (a, b) {\n        var value1 = a[shuxing];\n        var value2 = b[shuxing];\n        return value1 - value2;\n    }\n}\nconsole.log(arr.sort(objSort("a")))\n')])])])])]),a._v(" "),t("h2",{attrs:{id:"二、fiter、map-和-reduce-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、fiter、map-和-reduce-的区别","aria-hidden":"true"}},[a._v("#")]),a._v(" 二、fiter、map 和 reduce 的区别")]),a._v(" "),t("p",[a._v("它三个都是数组的方法，直接看文档的案例。像这种面试题，如果问到不会了，就总结起来，多背几遍，不要在意不会。直接给面试官说 ，不经常用，用的时候看文档")]),a._v(" "),t("h2",{attrs:{id:"三、add-2-3-怎么实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、add-2-3-怎么实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 三、add(2)(3)怎么实现")]),a._v(" "),t("p",[a._v("这个先看看它的案例，不懂的话，抽空我给你讲讲")]),a._v(" "),t("p",[a._v("https://segmentfault.com/a/1190000018265172")]),a._v(" "),t("h2",{attrs:{id:"四、已经年份和月初第一天，怎么知道月底最后一天是哪天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、已经年份和月初第一天，怎么知道月底最后一天是哪天","aria-hidden":"true"}},[a._v("#")]),a._v(" 四、已经年份和月初第一天，怎么知道月底最后一天是哪天")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("先科普下日期的用法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("new Date();\nnew Date(value);\nnew Date(dateString);\nnew Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n各参数的含义：\nvalue 代表自1970年1月1日00:00:00 (世界标准时间) 起经过的毫秒数。\ndateString 表示日期的字符串值。该字符串应该能被 Date.parse() 方法识别\nyear 代表年份的整数值。为了避免2000年问题最好指定4位数的年份; 使用 1998, 而不要用 98.\nmonth 代表月份的整数值从0（1月）到11（12月）。\nday 代表一个月中的第几天的整数值，从1开始。\nhour 代表一天中的小时数的整数值 (24小时制)。\nminute 分钟数。\nsecond 秒数。\nmillisecond 表示时间的毫秒部分的整数值。\n1秒等于1000毫秒\n")])])])]),a._v(" "),t("li",[t("p",[a._v("getDate() 方法可返回月份的某一天。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(new Date()).getDate()\n返回值是 1 ~ 31 之间的一个整数。\n")])])])]),a._v(" "),t("li",[t("p",[a._v("实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var year = 2019;\nvar month =11;\nvar new_date = new Date(year,month,1); //取当年当月中的第一天\n//获取当月最后一天毫秒\nvar hm=new_date.getTime()-1000*60*60*24;\n//获取当月最后一天日期\nvar rq= new Date(hm);\nconsole.log(rq.getDate());\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"五、插槽的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、插槽的作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 五、插槽的作用")]),a._v(" "),t("p",[a._v("看这个就行，比较全面，或者看看笔记和视频")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/willard_cui/article/details/82469114")]),a._v(" "),t("h2",{attrs:{id:"六、mixin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、mixin","aria-hidden":"true"}},[a._v("#")]),a._v(" 六、mixin")]),a._v(" "),t("p",[a._v("这是混入，vue 中，如果一个 "),t("code",[a._v(".vue")]),a._v(" 文件很长的话，可以把 "),t("code",[a._v("script")]),a._v("部分的代码抽离出来，然后通过混入的形式写进入。看案例")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("创建一个 "),t("code",[a._v("yly.js")]),a._v(" 文件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("export default {\n  data() {\n    return {\n      // 是否渲染为密码框\n      ispwd: true,\n      // 登录表单对象\n      loginForm: {\n        username: 'admin',\n        password: '123456'\n      },\n    }\n  },\n  methods: {\n    // 登录的方法\n    login() {\n      console.log('yly')\n    }\n  }\n}\n")])])])]),a._v(" "),t("li",[t("p",[a._v("创建一个 "),t("code",[a._v("yly.vue")]),a._v(" 文件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<template>\n  <div class="container">\n\t\t\t\t<h1>yly</h1>\n  </div>\n</template>\n\n<script>\n// 导入属于自己的 mixins 文件\nimport ylymix from \'./yly.js\'\nexport default {\n  mixins: [ylymix]\n}\n<\/script>\n\n<style lang="less" scoped>\n\n</style>\n')])])])])]),a._v(" "),t("h2",{attrs:{id:"七、数组去重多重方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、数组去重多重方式","aria-hidden":"true"}},[a._v("#")]),a._v(" 七、数组去重多重方式")]),a._v(" "),t("ol",[t("li",[a._v("Set(最常用)")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.unique = function() {\n    return [...new Set(this)];\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n\n")])])]),t("p",[a._v("2.Map")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.unique = function() {\n    const tmp = new Map();\n    return this.filter(item => {\n        return !tmp.has(item) && tmp.set(item, 1);\n    })\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n\n")])])]),t("p",[a._v("3.Array.prototype.indexOf()")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.unique = function() {\n    return this.filter((item, index) => {\n        return this.indexOf(item) === index;\n    })\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("Array.prototype.includes()")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.unique = function() {\n    const newArray = [];\n    this.forEach(item => {\n        if (!newArray.includes(item)) {\n            newArray.push(item);\n        }\n    });\n    return newArray;\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[a._v("Array.prototype.reduce()")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.unique = function() {\n    return this.sort().reduce((init, current) => {\n        if (init.length === 0 || init[init.length - 1] !== current) {\n            init.push(current);\n        }\n        return init;\n    }, []);\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n")])])]),t("h2",{attrs:{id:"八、转换数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、转换数字","aria-hidden":"true"}},[a._v("#")]),a._v(" 八、转换数字")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let number = '10';\nnumber = +number;\nconsole.log(number); // 10\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let number = '10';\nnumber = ~~number;\nconsole.log(number); // 10\n")])])]),t("h2",{attrs:{id:"九、数组降维度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、数组降维度","aria-hidden":"true"}},[a._v("#")]),a._v(" 九、数组降维度")]),a._v(" "),t("ol",[t("li",[a._v("二维数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [ [1], [2], [3] ];\narr = Array.prototype.concat.apply([], arr);\nconsole.log(arr);// [1, 2, 3]\n\nlet array = [ [1], [2], [3] ];\narray = array.flat(2);\nconsole.log(array); // [1, 2, 3]\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("多维数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [ [1], [2], [3] ];\narr = Array.prototype.concat.apply([], arr);\nconsole.log(arr);// [1, 2, 3]\n\nlet array = [ [1], [2], [3] ];\narray = array.flat(2);\nconsole.log(array); // [1, 2, 3]\n")])])]),t("h1",{attrs:{id:"vue-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-面试题","aria-hidden":"true"}},[a._v("#")]),a._v(" Vue 面试题")]),a._v(" "),t("h2",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础","aria-hidden":"true"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),t("h3",{attrs:{id:"vue-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-指令","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 指令")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("指令都是行内属性")]),a._v(" > "),t("code",[a._v("v-model")]),a._v("放在 input、textarea、select>option 上的，实现双向数据绑定\n"),t("code",[a._v("v-text")]),a._v(" 展示对应的文本\n"),t("code",[a._v("v-once")]),a._v(" 对应的标签只渲染一次\n"),t("code",[a._v("v-show=布尔")]),a._v(" 是否能显示，true 能显示，false 不能显示（存在隐式转化）\n"),t("code",[a._v("v-html")]),a._v(" 把值中的标签渲染出来\n"),t("code",[a._v("v-pre")]),a._v(" 跳过有这个指令的标签及其子元素的编译，按照原生代码编译\n"),t("code",[a._v("v-cloak")]),a._v(" 需要配合 css 使用：解决显示问题")])]),a._v(" "),t("ul",[t("li",[a._v("v-if")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("控制是否渲染该元素\n值是true，则渲染该元素；false则不渲染\n与v-else v-else-if连着使用\n可以使用template标签，就不会出现多余标签\n")])])]),t("ul",[t("li",[t("p",[a._v("v-for")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("循环显示元素\n可以循环数组、对象、数字、字符串\n最好加:key='a+i'\nv-for='item in array'\n")])])])]),a._v(" "),t("li",[t("p",[a._v("v-bind")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("用于绑定行内属性 简写成:\n")])])]),t("ul",[t("li",[a._v("v-on")])]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("用于事件绑定 简写成@\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<body>\n    <div id=\"app\">\n        {{ary}}\n        <button @click='fn'>按钮1</button>\n        <button @click='fn(name,$event)'>按钮2</button>\n        \x3c!-- $event是固定写法，代表传参事件对象 --\x3e\n    </div>\n</body>\n\n</html>\n<script src=\"./node/node_modules/vue/dist/vue.js\"><\/script>\n<script>\n    //事件绑定，用v-on：事件类型=‘函数’  或者  @事件类型=‘函数’\n    //函数一般是在methods中定义的\n    //对应的函数一般不带小括号，默认传参事件对象e\n    //当我们需要传参时，需要加小括号,小括号里写需要传的参数；当只有小括号没有传参时，为undefined\n    //el data methods 都是VUE规定死的属性名\n    let vm = new Vue({\n        el: '#app',\n        data: {\n            ary: [1, 2, 3, 4],\n            name:'zhangsan'\n        },\n        methods: {\n            fn: function (val,e) {\n                console.log(val,e,this)\n            }\n        }\n    })\n    //@kryup.13='fn'在按下回车的时候才会触发该函数\n<\/script>\n")])])]),t("h3",{attrs:{id:"vue-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 对象")]),a._v(" "),t("blockquote",[t("p",[a._v("data 中的属性最终都添加到了实例上 属性需要有 get set，才能触发视图更新")])]),a._v(" "),t("pre",[t("code",[a._v(" let vm = new Vue({\n     el: '#app',\n     data: {\n         name: 'liu',\n         age:21,\n         q:'<h1>haha</h1>',\n         obj:{\n             a:123,//对于对象来说，新增一个属性不会触发视图更新，只有改变属性时才会触发视图更新\n             b:undefined,\n         }\n     }\n }).$mount('#app')\n //处理方式\n //1.正常写全要用到的属性；先预留要用到的属性\n //2.整个对象的重新赋值\n //3.$set()方法\n vm.$set(vm.obj,'c','456')\n //4.增加一个无关变量t,每次修改完数据之后；重置t就可以了\n")])]),a._v(" "),t("h3",{attrs:{id:"vue-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-数组","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    let vm = new Vue({\n        el: '#app',\n        data: {\n            ary: [1, 2, 3, 4]\n        }\n    })\n    vm.ary.length--;\n    //能改变原有数组，但不能触发视图更新，只有数组原型上的变异方法可以触发更新\n    //数组变异方法：pop shift unshift push reverse splice sort\n")])])]),t("h3",{attrs:{id:"vue-过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-过滤器","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 过滤器")]),a._v(" "),t("blockquote",[t("p",[a._v("全局用 filter，实例局部使用 filters 全局过滤器要放在需要使用的实例的前面")])]),a._v(" "),t("h3",{attrs:{id:"vue-计算属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-计算属性","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 计算属性")]),a._v(" "),t("p",[t("strong",[a._v("computed")])]),a._v(" "),t("blockquote",[t("ol",[t("li",[a._v("于 data 同级别")]),a._v(" "),t("li",[a._v("语法同 methods 一样")]),a._v(" "),t("li",[a._v("计算属性的名字 不能跟 data 或 methods 中的名字重复")]),a._v(" "),t("li",[a._v("完全依赖于函数体中出现的属性名，只在最初加载时和其中属性名改变时运行，并不是像 methods 中的函数只要页面更新就运行一次")]),a._v(" "),t("li",[a._v("不能传参")]),a._v(" "),t("li",[a._v("异步的无法处理")]),a._v(" "),t("li",[a._v("为了提高性能而存在")])])]),a._v(" "),t("h3",{attrs:{id:"vue-监听属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-监听属性","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 监听属性")]),a._v(" "),t("ul",[t("li",[a._v("当且仅当监听的属性（例如：name）发生变化时会执行函数")]),a._v(" "),t("li",[a._v("可以处理异步")]),a._v(" "),t("li",[a._v("下面这种写法不能监听引用数据类型的内部变化")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" watch:{\n            name(newV,oldV){\n                clearTimeout(this.timer)\n                this.timer=setTimeout(() => {\n                    if (newV.length > 5) {\n                        this.msg2 = '名字太长'\n                    }else{\n                        this.msg2 = ''\n                    }\n                }, 500)\n            }\n        }\n")])])]),t("ul",[t("li",[a._v("深度监听需要用下面这种语法")]),a._v(" "),t("li",[a._v("这种深度监听在有 get 和 set 属性时才会触发监听")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("watch:{\n  obj:{\n    handler(){\n    \tconsole.log(1111)\n  \t},\n \t\tdeep:true\n  }\n}\n")])])]),t("h3",{attrs:{id:"vue-自定义指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-自定义指令","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 自定义指令")]),a._v(" "),t("p",[t("strong",[a._v("directives")])]),a._v(" "),t("blockquote",[t("p",[a._v("一个指令定义对象可以提供如下几个钩子函数 (均为可选)：")]),a._v(" "),t("ul",[t("li",[a._v("bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")]),a._v(" "),t("li",[a._v("inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。")]),a._v(" "),t("li",[a._v("update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。")]),a._v(" "),t("li",[a._v("componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。")]),a._v(" "),t("li",[a._v("unbind：只调用一次，指令与元素解绑时调用。")])])]),a._v(" "),t("h3",{attrs:{id:"vue-组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 组件")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("全局组件")])]),a._v(" "),t("li",[t("p",[a._v("局部组件")])]),a._v(" "),t("li",[t("p",[a._v("组件通信")])]),a._v(" "),t("li",[t("p",[a._v("插槽")])]),a._v(" "),t("li",[t("p",[a._v("组件缓存")]),a._v(" "),t("p",[t("strong",[a._v("keep-alive")])])]),a._v(" "),t("li")]),a._v(" "),t("h3",{attrs:{id:"vue-事件修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-事件修饰符","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 事件修饰符")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[a._v(".self")]),a._v("只点元素本身时才触发事件")]),a._v(" "),t("li",[t("code",[a._v(".stop")]),a._v("阻止冒泡事件")]),a._v(" "),t("li",[t("code",[a._v(".prevent")]),a._v("阻止默认事件")]),a._v(" "),t("li",[t("code",[a._v(".once")]),a._v("对应函数只触发一次")]),a._v(" "),t("li",[t("code",[a._v(".capture")]),a._v("在捕获阶段触发二级绑定事件")]),a._v(" "),t("li",[t("code",[a._v(".passive")]),a._v("优先执行默认事件（滚动行为）")])])]),a._v(" "),t("h3",{attrs:{id:"vue-表单修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-表单修饰符","aria-hidden":"true"}},[a._v("#")]),a._v(" vue 表单修饰符")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[a._v(".number")]),a._v("转化为数字，类似 parse 转化")]),a._v(" "),t("li",[t("code",[a._v(".trim")]),a._v("去字符串前后空格")])])]),a._v(" "),t("h2",{attrs:{id:"vue-router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router","aria-hidden":"true"}},[a._v("#")]),a._v(" Vue-router")]),a._v(" "),t("p",[a._v("vue-router 是 vue 的路由插件")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("步骤")])]),a._v(" "),t("p",[a._v("1、声明组件")]),a._v(" "),t("p",[a._v("2、编写路由映射表")]),a._v(" "),t("p",[a._v("3、把编辑好的映射表注入到 router 实例中")]),a._v(" "),t("p",[a._v("4、把 router 实例注入到根实例中")]),a._v(" "),t("p",[a._v("router-link 控制跳转的链接和显示的文字")]),a._v(" "),t("p",[a._v("router-view 控制显示的组件内容")]),a._v(" "),t("p",[a._v("active-class 控制选中对应路径的类名")]),a._v(" "),t("p",[a._v("tag 控制渲染成什么标签")])]),a._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    //路由映射表\n    let routes = [{\n            path: '/home',\n            component: home\n        },\n        {\n            path: '/list',\n            component: list\n        }\n    ]\n\n    let router=new VueRouter({\n        routes:routes,\n    })\n    let vm = new Vue({\n        el: '#app',\n        data: {\n            name: \"zhangsan\"\n        },\n        router,\n    })\n")])])]),t("h3",{attrs:{id:"传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传参","aria-hidden":"true"}},[a._v("#")]),a._v(" 传参")]),a._v(" "),t("blockquote",[t("p",[a._v("提供了两种传参方式")]),a._v(" "),t("p",[a._v("1、query 传参（问号传参）")]),a._v(" "),t("p",[a._v("路由映射表不用改动 "),t("code",[a._v(":to={path:'',query:{}}")]),a._v("或者"),t("code",[a._v(":to={name:'',query:{}}")])]),a._v(" "),t("p",[a._v("2、params 传参（路径传参）")]),a._v(" "),t("p",[a._v("在映射表中添加 "),t("code",[a._v("/:变量")]),a._v(" 的形式； "),t("code",[a._v(":to={name:'',params:{变量:''}}}")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<router-link :to='{path:\"/list\",query:{id:123,e:name}}' tag='div'>列表</router-link>\n")])])]),t("h3",{attrs:{id:"重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重定向","aria-hidden":"true"}},[a._v("#")]),a._v(" 重定向")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let routes = [\n        {\n            path:'/',\n            redirect:'/home/index'\n        },\n        {\n            path:'/home/index',\n            name:'page1',\n            component:index\n        }\n    ]\n")])])]),t("h3",{attrs:{id:"懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#懒加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 懒加载")]),a._v(" "),t("h2",{attrs:{id:"vuex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuex","aria-hidden":"true"}},[a._v("#")]),a._v(" Vuex")]),a._v(" "),t("blockquote",[t("p",[a._v("是一个能方便 vue 实例及其组件传输数据的插件 方便传输数据，作为公共存储数据的一个库")])]),a._v(" "),t("p",[t("strong",[a._v("步骤")])]),a._v(" "),t("ul",[t("li",[a._v("1、创建一个 vuex 实例")]),a._v(" "),t("li",[a._v("2、在根组件中注册一下")]),a._v(" "),t("li",[a._v("3、注册后，根组件及其一下的局部或全局组件可使用 vuex 实例中的数据方法，多个组件使用同一套规则时，我们可以把这套规则单独拎出来写在 vuex 实例中通用")])]),a._v(" "),t("h3",{attrs:{id:"五个核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五个核心概念","aria-hidden":"true"}},[a._v("#")]),a._v(" "),t("strong",[a._v("五个核心概念")])]),a._v(" "),t("h4",{attrs:{id:"state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state","aria-hidden":"true"}},[a._v("#")]),a._v(" state")]),a._v(" "),t("h4",{attrs:{id:"getters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getters","aria-hidden":"true"}},[a._v("#")]),a._v(" getters")]),a._v(" "),t("h4",{attrs:{id:"mutations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mutations","aria-hidden":"true"}},[a._v("#")]),a._v(" mutations")]),a._v(" "),t("h4",{attrs:{id:"actions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#actions","aria-hidden":"true"}},[a._v("#")]),a._v(" actions")]),a._v(" "),t("h4",{attrs:{id:"module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#module","aria-hidden":"true"}},[a._v("#")]),a._v(" Module")]),a._v(" "),t("h2",{attrs:{id:"组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件通信","aria-hidden":"true"}},[a._v("#")]),a._v(" 组件通信")]),a._v(" "),t("h3",{attrs:{id:"sync-修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sync-修饰符","aria-hidden":"true"}},[a._v("#")]),a._v(" .sync 修饰符")]),a._v(" "),t("h3",{attrs:{id:"父子通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父子通信","aria-hidden":"true"}},[a._v("#")]),a._v(" 父子通信")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("组件上使用 "),t("code",[a._v("v-model")])]),a._v(" "),t("p",[a._v("本质还是：")]),a._v(" "),t("ul",[t("li",[a._v("Props")]),a._v(" "),t("li",[a._v("Events")])])]),a._v(" "),t("li",[t("p",[a._v("Ref")]),a._v(" "),t("ul",[t("li",[a._v("获取 DOM")]),a._v(" "),t("li",[a._v("获取组件")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("使用 this.$refs查找命名子组件。\n")])])])]),a._v(" "),t("li",[t("p",[a._v("访问子组件数据")])])]),a._v(" "),t("p",[a._v("Events")]),a._v(" "),t("ul",[t("li",[a._v("在子组件中 "),t("code",[a._v("this.$emit('事件名称'[, 可选数据])")])]),a._v(" "),t("li",[a._v("在父组件中使用 "),t("code",[a._v("v-on")]),a._v(" 监听自定义事件去处理")])]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("h4",{attrs:{id:"parent和-children"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parent和-children","aria-hidden":"true"}},[a._v("#")]),a._v(" "),t("code",[a._v("$parent和 $children")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("使用 this.$parent查找当前组件的父组件。\n使用 this.$children查找当前组件的直接子组件，可以遍历全部子组件， 需要注意 $children 并不保证顺序，也不是响应式的。\n")])])])]),a._v(" "),t("li",[t("p",[a._v("依赖注入")])]),a._v(" "),t("li",[t("p",[a._v("使用 Props 传递")]),a._v(" "),t("ul",[t("li",[a._v("在子组件中声明 props 接收")]),a._v(" "),t("li",[a._v("在父组件中通过子组件标签属性进行传递")])]),a._v(" "),t("p",[a._v("注意： Props 数据是单向数据流")]),a._v(" "),t("ul",[t("li",[a._v("父组件数据的改变会传导给子组件")]),a._v(" "),t("li",[a._v("但是反之不会\n"),t("ul",[t("li",[a._v("引用类型（对象、数组）可以修改，不能重新赋值")])])])])])]),a._v(" "),t("h3",{attrs:{id:"非父子通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非父子通信","aria-hidden":"true"}},[a._v("#")]),a._v(" 非父子通信")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("Vuex")])]),a._v(" "),t("li",[t("p",[a._v("eventBus")])]),a._v(" "),t("li",[t("p",[a._v("$root")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("使用 this.$root查找根组件，并可以配合$children遍历全部组件。\n")])])])])]),a._v(" "),t("h3",{attrs:{id:"attrs-和-listeners"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attrs-和-listeners","aria-hidden":"true"}},[a._v("#")]),a._v(" "),t("strong",[t("code",[a._v("$attrs")]),a._v(" 和 "),t("code",[a._v("$listeners")])])]),a._v(" "),t("h3",{attrs:{id:"本地存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地存储","aria-hidden":"true"}},[a._v("#")]),a._v(" 本地存储")]),a._v(" "),t("ul",[t("li",[a._v("localStorage 持久存储")]),a._v(" "),t("li",[a._v("sessionStorage 会话存储")]),a._v(" "),t("li",[a._v("cookie")])]),a._v(" "),t("h2",{attrs:{id:"mvvm-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-原理","aria-hidden":"true"}},[a._v("#")]),a._v(" MVVM 原理")]),a._v(" "),t("p",[a._v("常见的面试问题：")]),a._v(" "),t("ul",[t("li",[a._v("Vue 数据绑定的原理？")]),a._v(" "),t("li",[a._v("MVVM 的原理？")]),a._v(" "),t("li",[a._v("Vue 双向数据绑定的原理？")]),a._v(" "),t("li",[a._v("Vue 数据响应式原理？")]),a._v(" "),t("li",[a._v("数据响应式原理？")]),a._v(" "),t("li",[a._v("MVVM 是什么")])]),a._v(" "),t("ol",[t("li",[a._v("MVVM 是什么")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Model（M）：普通的 JavaScript 对象，例如 Vue 实例中的data普通数据\nView（V）：视图,HTML DOM 模板\nViewModel（VM）：Vue实例,负责数据和视图的更新,它是 Model数据 和 View 视图通信的一个桥梁\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[a._v("Vue 数据绑定的原理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("Vue 数据响应式原理&数据响应式原理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n")])])])]),a._v(" "),t("li",[t("p",[a._v("Vue 双向数据绑定的原理")])]),a._v(" "),t("li",[t("p",[a._v("MVVM 的原理")])]),a._v(" "),t("li",[t("p",[a._v("什么是数据劫持（属性拦截器）？")]),a._v(" "),t("p",[a._v("说白了就是：观察数据的变化，执行特定业务逻辑。")]),a._v(" "),t("ul",[t("li",[a._v("Object.defineProperty\n"),t("ul",[t("li",[a._v("ECMAScript 5 中的一个 API")]),a._v(" "),t("li",[a._v("Vue 1 和 Vue 2 中使用的都是 Object.defineProperty")])])]),a._v(" "),t("li",[a._v("Proxy\n"),t("ul",[t("li",[a._v("ECMAScript 6 中的一个 API")]),a._v(" "),t("li",[a._v("即将升级的 Vue 3 会升级使用 Proxy")]),a._v(" "),t("li",[a._v("Proxy 比 Object.defineProperty 性能要更好")])])])])]),a._v(" "),t("li",[t("p",[a._v("事件发布/订阅")]),a._v(" "),t("ul",[t("li",[a._v("观察者模式")]),a._v(" "),t("li",[a._v("发布/订阅模式")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 监听一个自定义事件\nbus.$on('事件类型', 处理函数)\n// 发布事件\nbus.$emit('事件类型', 处理函数)\nconst bus = new Vue()\nbus.$on('a', () => {\n  \n})\nbus.$on('b', () => {\n  \n})\nbus.$emit('a')\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function EventEmitter () {\n  // 存储所有订阅的消息处理函数\n  this.subs = {\n    // 事件类型: [处理函数, 处理函数...]\n    // a: [],\n  }\n}\n\nEventEmitter.prototype.$on = function (eventType, callback) {\n  this.subs[eventType] = this.subs[eventType] || []\n  this.subs[eventType].push(callback)\n}\n\n// 参数中的 ... 表示函数的剩余（rest）参数\n// 它会把所有参数放到一个数组中\nEventEmitter.prototype.$emit = function (eventType, ...args) {\n  const subs = this.subs[eventType]\n  if (subs) {\n    subs.forEach(callback => {\n      callback(...args)\n    })\n  }\n}\n\nconst e = new EventEmitter()\n\n// 我就要在 $on 函数中往 subs 里面添加一个名字叫 a 的成员：值是一个数组\n// \ne.$on('a', (arg1, arg2) => {\n  console.log('a1', arg1, arg2)\n})\n\ne.$on('a', () => {\n  console.log('a2')\n})\n\ne.$on('b', () => {\n  console.log('b1')\n})\n\ne.$on('c', () => {\n  console.log('c1')\n})\n\nconsole.log(e.subs)\n\ne.$emit('a', 123, 456)\ne.$emit('b')\ne.$emit('abc')\n\n")])])])]),a._v(" "),t("li")]),a._v(" "),t("h2",{attrs:{id:"vue-项目优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-项目优化","aria-hidden":"true"}},[a._v("#")]),a._v(" Vue 项目优化")]),a._v(" "),t("p",[a._v("分前端优化和后端优化，后端优化以 "),t("strong",[a._v("node")]),a._v(" 服务器作为代表，如果只是单纯应聘前端，请不要回答后端的优化，以免踩坑。")]),a._v(" "),t("h3",{attrs:{id:"前端优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 前端优化")]),a._v(" "),t("h4",{attrs:{id:"cdn-的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn-的使用","aria-hidden":"true"}},[a._v("#")]),a._v(" CDN 的使用")]),a._v(" "),t("blockquote",[t("p",[a._v("浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。")])]),a._v(" "),t("h4",{attrs:{id:"图片压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片压缩","aria-hidden":"true"}},[a._v("#")]),a._v(" 图片压缩")]),a._v(" "),t("blockquote",[t("p",[a._v("在 vue 项目中除了可以在 webpack.base.conf.js 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 image-webpack-loader来压缩图片：")])]),a._v(" "),t("ol",[t("li",[t("p",[a._v("安装")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install image-webpack-loader --save-devbr\n")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("webpack.base.conf.js 中进行配置")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("{\n  test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n  use:[\n    {\n      loader: 'url-loader',\n      options: {\n        limit: 10000,\n        name: utils.assetsPath('img/[name].[hash:7].[ext]')\n      }\n    },\n    {\n      loader: 'image-webpack-loader',\n      options: { bypassOnDebug: true,}\n    }      \n  ]\n}\n")])])])])]),a._v(" "),t("h4",{attrs:{id:"插件的按需引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件的按需引入","aria-hidden":"true"}},[a._v("#")]),a._v(" 插件的按需引入")]),a._v(" "),t("p",[a._v("我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("安装 babel-plugin-component")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install babel-plugin-component -Dbr\n")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v(".babelrc 修改为：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{ "presets": [["es2015", { "modules": false }]], "plugins": [ [ "component", { "libraryName": "element-ui", "styleLibraryName": "theme-chalk" } ] ]}\n')])])])])]),a._v(" "),t("h4",{attrs:{id:"处理代码冗余"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理代码冗余","aria-hidden":"true"}},[a._v("#")]),a._v(" 处理代码冗余")]),a._v(" "),t("p",[a._v("减少 ES6 转为 ES5 的冗余代码，Babel 插件会在将 ES6 代码转换成 ES5 代码时会注入一些辅助函数")]),a._v(" "),t("p",[a._v("在默认情况下， Babel 会在每个输出文件中内嵌这些依赖的辅助函数代码，如果多个源代码文件都依赖这些辅助函数，那么这些辅助函数的代码将会出现很多次，造成代码冗余。为了不让这些辅助函数的代码重复出现，可以在依赖它们时通过 require('babel-runtime/helpers/createClass') 的方式导入，这样就能做到只让它们出现一次。babel-plugin-transform-runtime 插件就是用来实现这个作用的，将相关辅助函数进行替换成导入语句，从而减小 babel 编译出来的代码的文件大小。")]),a._v(" "),t("p",[t("strong",[a._v("（1）首先，安装 babel-plugin-transform-runtime ：")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install babel-plugin-transform-runtime --save-devbr\n")])])]),t("p",[t("strong",[a._v("（2）然后，修改 .babelrc 配置文件为：")])]),a._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('"plugins": [ "transform-runtime"]\n')])])]),t("h4",{attrs:{id:"提取公共代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取公共代码","aria-hidden":"true"}},[a._v("#")]),a._v(" 提取公共代码")]),a._v(" "),t("p",[a._v("如果项目中没有去将每个页面的第三方库和公共模块提取出来，则项目会存在以下问题：")]),a._v(" "),t("ul",[t("li",[a._v("相同的资源被重复加载，浪费用户的流量和服务器的成本。")]),a._v(" "),t("li",[a._v("每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。")])]),a._v(" "),t("p",[a._v("所以我们需要将多个页面的公共代码抽离成单独的文件，来优化以上问题 。Webpack 内置了专门用于提取多个Chunk 中的公共部分的插件 CommonsChunkPlugin。")]),a._v(" "),t("p",[a._v("如果要看插件的更多详细内容，可以查看 CommonsChunkPlugin 的 详细介绍。")]),a._v(" "),t("h4",{attrs:{id:"模板预编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板预编译","aria-hidden":"true"}},[a._v("#")]),a._v(" 模板预编译")]),a._v(" "),t("p",[a._v("当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。")]),a._v(" "),t("p",[a._v("预编译模板最简单的方式就是使用单文件组件——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。")]),a._v(" "),t("p",[a._v("如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 vue-template-loader，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。")]),a._v(" "),t("h4",{attrs:{id:"提取组件的-css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取组件的-css","aria-hidden":"true"}},[a._v("#")]),a._v(" 提取组件的 CSS")]),a._v(" "),t("p",[a._v("当使用单文件组件时，组件内的 CSS 会以 style 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，如果你使用服务端渲染，这会导致一段 “无样式内容闪烁 (fouc) ” 。将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。")]),a._v(" "),t("p",[a._v("查阅这个构建工具各自的文档来了解更多：")]),a._v(" "),t("ul",[t("li",[a._v("webpack + vue-loader ( vue-cli 的 webpack 模板已经预先配置好)")]),a._v(" "),t("li",[a._v("Browserify + vueify")]),a._v(" "),t("li",[a._v("Rollup + rollup-plugin-vue")])]),a._v(" "),t("h4",{attrs:{id:"优化-sourcemap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化-sourcemap","aria-hidden":"true"}},[a._v("#")]),a._v(" 优化 SourceMap")]),a._v(" "),t("p",[a._v("我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩、去掉多余的空格、babel编译化后，最终将编译得到的代码会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有 bug的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发来说不好调式定位问题，因此 sourceMap 出现了，它就是为了解决不好调式代码问题的。")]),a._v(" "),t("p",[a._v("开发环境推荐：cheap-module-eval-source-map")]),a._v(" "),t("p",[a._v("生产环境推荐：cheap-module-source-map")]),a._v(" "),t("h4",{attrs:{id:"图片资源懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片资源懒加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 图片资源懒加载")]),a._v(" "),t("p",[a._v("对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("安装")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install vue-lazyload --save-devbr\n")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("入口文件 man.js 中引入并使用")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import VueLazyload from 'vue-lazyload'\n")])])])]),a._v(" "),t("li",[t("p",[a._v("vue 中直接使用")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Vue.use(VueLazyload)\n//自定义选项\nVue.use(VueLazyload, {\n  preLoad: 1.3,\n  error: 'dist/error.png',\n  loading: 'dist/loading.gif',\n  attempt: 1\n})\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[t("strong",[a._v("vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<img v-lazy="/static/img/1.png">\n')])])]),t("h4",{attrs:{id:"路由懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 路由懒加载")]),a._v(" "),t("p",[a._v("Vue 是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const Foo = () => import('./Foo.vue')\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo\n    }\n  ]\n})\n")])])]),t("h4",{attrs:{id:"优化无限列表性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化无限列表性能","aria-hidden":"true"}},[a._v("#")]),a._v(" 优化无限列表性能")]),a._v(" "),t("p",[a._v("如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。你可以参考以下开源项目 vue-virtual-scroll-list 和 vue-virtual-scroller 来优化这种无限列表的场景的")]),a._v(" "),t("h3",{attrs:{id:"后端优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 后端优化")]),a._v(" "),t("h4",{attrs:{id:"开启-gzip-压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启-gzip-压缩","aria-hidden":"true"}},[a._v("#")]),a._v(" 开启 gzip 压缩")]),a._v(" "),t("blockquote",[t("p",[a._v("gzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome，firefox，IE 等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持，gzip 压缩效率非常高，通常可以达到 70% 的压缩率，也就是说，如果你的网页有 30K，压缩之后就变成了 9K 左右。")])]),a._v(" "),t("p",[a._v("以下我们以服务端使用我们熟悉的 express 为例，开启 gzip 非常简单，相关步骤如下：")]),a._v(" "),t("ol",[t("li",[a._v("安装")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install compression --savebr\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("编写代码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var compression = require('compression');\nvar app = express();\napp.use(compression())\n")])])]),t("h4",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 浏览器缓存")]),a._v(" "),t("p",[a._v("主要是设置文件的缓存时间。")])])},[],!1,null,null,null);e.default=s.exports}}]);